[
    {
        "children": [],
        "_id": "675cae84677ba7ab65dce460",
        "node": "675cae84677ba7e88bdce45f",
        "next": "675cae8dd02a5c14a43c6276",
        "_data": {
            "_id": "675cae84677ba7e88bdce45f",
            "referenceId": "d3a579d5-6833-47db-84f2-30ebcf9cdd2e",
            "type": "start",
            "label": "Start",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": true,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675cae84677ba7a5aadce46d",
        "node": "675cae84677ba7d2b8dce46a",
        "next": null,
        "_data": {
            "_id": "675cae84677ba7d2b8dce46a",
            "referenceId": "346bd32c-8842-4957-abb6-7240019bc5c6",
            "type": "end",
            "label": "End",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675cae8dd02a5cefa23c6279",
        "node": "675cae8dd02a5c14a43c6276",
        "next": "675caffad02a5c014b3c656c",
        "_data": {
            "_id": "675cae8dd02a5c14a43c6276",
            "referenceId": "c3ff4b50-dd31-4c79-997e-bc3dc736c118",
            "type": "code",
            "label": "READ ME",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "code": "/* \r\nFlow Purpose\r\n\r\nTo avoid code duplication the contract number validation is extracted to a subflow. This flow takes in the cleaned user input and tries to find a match for a given set of contract number formats.\r\n\r\n\r\n\r\n---------------------------------------\r\nCONNECTION TO OTHER FLOWS\r\n\r\nThis flow invokes the following flows:\r\nNone\r\n\r\n\r\nThis flow gets invoked by the following flows:\r\nAUTH_01_Contract\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n */",
                "hasError": false,
                "transpiled": ""
            },
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675caffad02a5cd3163c656f",
        "node": "675caffad02a5c014b3c656c",
        "next": "675cb06cd02a5c10373c667b",
        "_data": {
            "_id": "675caffad02a5c014b3c656c",
            "referenceId": "82ba6063-456a-4630-bf37-1bb814af09df",
            "type": "code",
            "label": "C: Mock Context for debugging",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "code": "try {\r\n    //Check if the sessionInformation object already exists, if not the chat was started from this flow, which means we need to initialize it for debugging\r\n    if(_.isUndefined(cc.sessionInformation)) {\r\n        cc.sessionInformation = {\r\n\t\t\"caller\": \"+49176145265874\",\r\n\t\t\"callee\": \"+49123456789123\",\r\n        \"recordingConsent\": true,\r\n        \"contract\": {},\r\n        \"inputCleaner\": {\r\n            \"inputText\": \"Anton Berta - 125.47 584. 65.\",\r\n            \"outputText\": \"ab124758465\"\r\n            }\r\n\t    }\r\n\r\n        cc.constants = {\r\n            \"apiBaseUrl\": \"https://api-trial.cognigy.ai/new\",\r\n\t\t    \"handoverTransferTarget\": \"+49123456789\",\r\n            \"flowControllerPercentages\": {\r\n            },\r\n            \"contract\": {\r\n                \"contractPrefixes\": [\r\n                    \"KV\",\r\n                    \"SV\",\r\n                    \"AB\"\r\n                ]\r\n    \t    }\r\n        }\r\n    }\r\n\r\n} catch(error) {\r\n    api.log(\"error\", `[AUTH_00_Main; C: Mock Context for debugging] Error Message: ${error.toString()}`)\r\n\r\n}",
                "hasError": false,
                "transpiled": "try {\n    if (_.isUndefined(cc.sessionInformation)) {\n        cc.sessionInformation = {\n            \"caller\": \"+49176145265874\",\n            \"callee\": \"+49123456789123\",\n            \"recordingConsent\": true,\n            \"contract\": {},\n            \"inputCleaner\": {\n                \"inputText\": \"Anton Berta - 125.47 584. 65.\",\n                \"outputText\": \"ab124758465\"\n            }\n        };\n        cc.constants = {\n            \"apiBaseUrl\": \"https://api-trial.cognigy.ai/new\",\n            \"handoverTransferTarget\": \"+49123456789\",\n            \"flowControllerPercentages\": {},\n            \"contract\": {\n                \"contractPrefixes\": [\n                    \"KV\",\n                    \"SV\",\n                    \"AB\"\n                ]\n            }\n        };\n    }\n}\ncatch (error) {\n    api.log(\"error\", `[AUTH_00_Main; C: Mock Context for debugging] Error Message: ${error.toString()}`);\n}\n"
            },
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675cb06cd02a5c01223c667e",
        "node": "675cb06cd02a5c10373c667b",
        "next": "675d6099adc7666916a23486",
        "_data": {
            "_id": "675cb06cd02a5c10373c667b",
            "referenceId": "7932beb3-8b8c-4ff7-a811-f9509118539c",
            "type": "code",
            "label": "C: Search for contract number match",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "code": "//THis code node extracts a contract number match from the output of the cleaner flow\r\n\r\nfunction extractContractMatch(searchText, prefixes) {\r\n    const prefixPattern = prefixes.join(\"|\")\r\n\r\n    const contractRegex = new RegExp(`(${prefixPattern})\\\\d{4,9}`, \"gi\")\r\n\r\n    let matches = searchText.match(contractRegex) || []\r\n\r\n    //Ensure only one match was found\r\n    if(matches.length == 1) {\r\n        //Extract the prefix that matched\r\n        const contractPrefix = matches[0].match(new RegExp(`(${prefixPattern})`, \"gi\"))\r\n\r\n        return [matches, contractPrefix]\r\n\r\n    } else {\r\n        //Overwrite matches to simulate no match found in case of more than one match\r\n        return []\r\n    }    \r\n}\r\n\r\ntry {\r\n    //Assign function inputs to desriptive variables\r\n    const searchText = cc.sessionInformation.inputCleaner.outputText\r\n    const prefixes = cc.constants.contract.contractPrefixes\r\n\r\n    //Call the extractContractMatch function to test if there is a match\r\n    let contractMatch = extractContractMatch(searchText, prefixes)\r\n\r\n    //Check if match was found\r\n    if(contractMatch.length == 2) {\r\n        cc.sessionInformation.contract.validContract = true\r\n        cc.sessionInformation.contract.contractNumber = contractMatch[0][0].toUpperCase()\r\n        cc.sessionInformation.contract.contractPrefix = contractMatch[1][0].toUpperCase()\r\n\r\n    } else {\r\n        cc.sessionInformation.contract.validContract = false\r\n    }\r\n\r\n\r\n\r\n} catch(error) {\r\n    api.log(\"error\", `[AUTH_01_1_Validate Contract; C: Search for contract number match] Error Message: ${error.toString()}`)\r\n\r\n}",
                "hasError": false,
                "transpiled": "function extractContractMatch(searchText, prefixes) {\n    const prefixPattern = prefixes.join(\"|\");\n    const contractRegex = new RegExp(`(${prefixPattern})\\\\d{4,9}`, \"gi\");\n    let matches = searchText.match(contractRegex) || [];\n    if (matches.length == 1) {\n        const contractPrefix = matches[0].match(new RegExp(`(${prefixPattern})`, \"gi\"));\n        return [matches, contractPrefix];\n    }\n    else {\n        return [];\n    }\n}\ntry {\n    const searchText = cc.sessionInformation.inputCleaner.outputText;\n    const prefixes = cc.constants.contract.contractPrefixes;\n    let contractMatch = extractContractMatch(searchText, prefixes);\n    if (contractMatch.length == 2) {\n        cc.sessionInformation.contract.validContract = true;\n        cc.sessionInformation.contract.contractNumber = contractMatch[0][0].toUpperCase();\n        cc.sessionInformation.contract.contractPrefix = contractMatch[1][0].toUpperCase();\n    }\n    else {\n        cc.sessionInformation.contract.validContract = false;\n    }\n}\ncatch (error) {\n    api.log(\"error\", `[AUTH_01_1_Validate Contract; C: Search for contract number match] Error Message: ${error.toString()}`);\n}\n"
            },
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [
            "675d6099adc7665fa7a23494",
            "675d6099adc7660c5ea234a1"
        ],
        "_id": "675d6099adc766d1e5a23489",
        "node": "675d6099adc7666916a23486",
        "next": "675cae84677ba7d2b8dce46a",
        "_data": {
            "_id": "675d6099adc7666916a23486",
            "referenceId": "d84a1865-f0a8-4dd8-a710-d2c089df76b7",
            "type": "if",
            "label": "Contract is valid?",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "condition": {
                    "type": "condition",
                    "rule": {
                        "left": "1",
                        "operand": "eq",
                        "right": "1"
                    },
                    "condition": "{{cc.sessionInformation.contract.validContract}}"
                }
            },
            "preview": {
                "type": "condition",
                "rule": {
                    "left": "1",
                    "operand": "eq",
                    "right": "1"
                },
                "condition": "{{cc.sessionInformation.contract.validContract}}"
            },
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d6099adc7660a58a23497",
        "node": "675d6099adc7665fa7a23494",
        "next": "675d609bd02a5cb50e3ce83a",
        "_data": {
            "_id": "675d6099adc7665fa7a23494",
            "referenceId": "1abf8b25-7872-4834-a906-5d99752dc399",
            "type": "then",
            "label": "Then",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d6099adc7663421a234a4",
        "node": "675d6099adc7660c5ea234a1",
        "next": null,
        "_data": {
            "_id": "675d6099adc7660c5ea234a1",
            "referenceId": "21679fe4-70f7-4153-8b82-3719a4784a4f",
            "type": "else",
            "label": "Else",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d609bd02a5c0b2f3ce83d",
        "node": "675d609bd02a5cb50e3ce83a",
        "next": "675d6126d02a5c24e33ce8f3",
        "_data": {
            "_id": "675d609bd02a5cb50e3ce83a",
            "referenceId": "5c4fe09e-cdbf-4662-8493-333bdc14aa65",
            "type": "say",
            "label": "S: Confirm Contract Number",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": true,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "say": {
                    "data": "",
                    "linear": false,
                    "loop": false,
                    "text": [
                        "Ich habe folgende Vertragsnummer verstanden: {{cc.sessionInformation.contract.contractNumber}}. Ist das korrekt?"
                    ],
                    "type": "text",
                    "_cognigy": {},
                    "_data": {
                        "_cognigy": {}
                    }
                },
                "handoverOutput": "userAndAgent",
                "generativeAI_rephraseOutputMode": "none",
                "generativeAI_amountOfLastUserInputs": 5,
                "generativeAI_customInputs": "",
                "generativeAI_temperature": 0.7
            },
            "preview": {
                "data": "",
                "linear": false,
                "loop": false,
                "text": [
                    "Ich habe folgende Vertragsnummer verstanden: {{cc.sessionInformation.contract.contractNumber}}. Ist das korrekt?"
                ],
                "type": "text",
                "_cognigy": {},
                "_data": {
                    "_cognigy": {}
                }
            },
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [
            "675d60e2adc766d775a23542",
            "675d60e2adc7662252a2354f"
        ],
        "_id": "675d60e2adc7661b85a2353b",
        "node": "675d60e2adc7666f64a23538",
        "next": null,
        "_data": {
            "_id": "675d60e2adc7666f64a23538",
            "referenceId": "664a4744-0132-48f0-8c05-0d6d8f9ed149",
            "type": "if",
            "label": "User confirmed?",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "condition": {
                    "type": "condition",
                    "rule": {
                        "left": "1",
                        "operand": "eq",
                        "right": "1"
                    },
                    "condition": "{{ci.type == \"pAnswer\"}}"
                }
            },
            "preview": {
                "type": "condition",
                "rule": {
                    "left": "1",
                    "operand": "eq",
                    "right": "1"
                },
                "condition": "{{ci.type == \"pAnswer\"}}"
            },
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d60e2adc76678dba23545",
        "node": "675d60e2adc766d775a23542",
        "next": "675d60fad02a5cb44a3ce898",
        "_data": {
            "_id": "675d60e2adc766d775a23542",
            "referenceId": "afdf9e4c-6f28-4b70-b844-02fa556ccf24",
            "type": "then",
            "label": "Then",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d60e2adc7665575a23552",
        "node": "675d60e2adc7662252a2354f",
        "next": "675d60f9adc7666b6aa23587",
        "_data": {
            "_id": "675d60e2adc7662252a2354f",
            "referenceId": "0ef6bf21-8da9-4138-9632-b8853522f5c5",
            "type": "else",
            "label": "Else",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d60f9adc7664864a2358a",
        "node": "675d60f9adc7666b6aa23587",
        "next": "675d90bcadc76683a8a287a7",
        "_data": {
            "_id": "675d60f9adc7666b6aa23587",
            "referenceId": "ee7b3755-7bbc-4f84-887d-f9217fc80a84",
            "type": "addToContext",
            "label": "AC: confirmed - false",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "key": "sessionInformation.contract.confirmed",
                "value": "false",
                "mode": "simple"
            },
            "preview": "sessionInformation.contract.confirmed",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d60fad02a5c1eda3ce89b",
        "node": "675d60fad02a5cb44a3ce898",
        "next": null,
        "_data": {
            "_id": "675d60fad02a5cb44a3ce898",
            "referenceId": "b19ba4e8-ffef-48eb-adbc-cdfa35409a9c",
            "type": "addToContext",
            "label": "AC: confirmed - true",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "key": "sessionInformation.contract.confirmed",
                "value": "true",
                "mode": "simple"
            },
            "preview": "sessionInformation.contract.confirmed",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d6126d02a5c8fb23ce8f6",
        "node": "675d6126d02a5c24e33ce8f3",
        "next": "675d60e2adc7666f64a23538",
        "_data": {
            "_id": "675d6126d02a5c24e33ce8f3",
            "referenceId": "bc2bc71b-7ed0-43e2-8d39-2fda5e666e8b",
            "type": "wait",
            "label": "Wait for Input",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [
            "675d90bcadc7665df5a287b1",
            "675d90bcadc7664683a287be"
        ],
        "_id": "675d90bcadc7668357a287aa",
        "node": "675d90bcadc76683a8a287a7",
        "next": null,
        "_data": {
            "_id": "675d90bcadc76683a8a287a7",
            "referenceId": "124d11a6-4ce2-4dec-a149-b762f1b0512c",
            "type": "once",
            "label": "Once",
            "comment": "Clean and Validate Input directly to check if user mentioned a new contract  number in his \"No\" answer. \n\nE.g. \"Nein, meine Nummer ist die KV123385\"",
            "commentColor": "#ffff8d",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d90bcadc766e1c8a287b4",
        "node": "675d90bcadc7665df5a287b1",
        "next": "675d92abd02a5c36cd3d13ba",
        "_data": {
            "_id": "675d90bcadc7665df5a287b1",
            "referenceId": "53771267-b8cf-496e-895d-18de346cdc9a",
            "type": "onFirstExecution",
            "label": "On First Time",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d90bcadc766a88ca287c1",
        "node": "675d90bcadc7664683a287be",
        "next": null,
        "_data": {
            "_id": "675d90bcadc7664683a287be",
            "referenceId": "3d362a7b-31e8-4f91-b6a8-72f2420926f1",
            "type": "afterwards",
            "label": "Afterwards",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d90beadc7664259a287dd",
        "node": "675d8f2cadc76685ada2826c",
        "next": "675d9d50adc7661b44a2a200",
        "_data": {
            "_id": "675d8f2cadc76685ada2826c",
            "referenceId": "01d17861-8282-4927-97da-3751dd7d8810",
            "type": "executeFlow",
            "label": "EX: BF_02_Clean Input",
            "comment": "",
            "commentColor": "#ffff8d",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "flowNode": {
                    "flow": "57395a29-181d-48bd-bb4b-9cf2c04d8698",
                    "node": "cb03a4fc-500e-4448-9e77-6e38206e8ed4"
                },
                "parseIntents": true,
                "parseKeyphrases": true,
                "absorbContext": ""
            },
            "preview": {
                "flow": "57395a29-181d-48bd-bb4b-9cf2c04d8698",
                "node": "cb03a4fc-500e-4448-9e77-6e38206e8ed4"
            },
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d92abd02a5cb60e3d13bd",
        "node": "675d92abd02a5c36cd3d13ba",
        "next": "675d8f2cadc76685ada2826c",
        "_data": {
            "_id": "675d92abd02a5c36cd3d13ba",
            "referenceId": "dd0e427f-7ada-4a09-ba1f-98fe4ddf94aa",
            "type": "addToContext",
            "label": "AC: inputCleaner.inputText",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "key": "sessionInformation.inputCleaner.inputText",
                "value": "{{ci.text}}",
                "mode": "simple"
            },
            "preview": "sessionInformation.inputCleaner.inputText",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d9d50adc766e66ca2a203",
        "node": "675d9d50adc7661b44a2a200",
        "next": "675d9e5dadc7660328a2a3cd",
        "_data": {
            "_id": "675d9d50adc7661b44a2a200",
            "referenceId": "1ac5c701-5f38-4ee6-8d67-593691f13d0c",
            "type": "code",
            "label": "C: Search for contract number match (2)",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "code": "//THis code node extracts a contract number match from the output of the cleaner flow\r\n\r\nfunction extractContractMatch(searchText, prefixes) {\r\n    const prefixPattern = prefixes.join(\"|\")\r\n\r\n    const contractRegex = new RegExp(`(${prefixPattern})\\\\d{4,9}`, \"gi\")\r\n\r\n    let matches = searchText.match(contractRegex) || []\r\n    cc.mathces = matches\r\n    //Ensure only one match was found\r\n    if(matches.length == 1) {\r\n        //Extract the prefix that matched\r\n        const contractPrefix = matches[0].match(new RegExp(`(${prefixPattern})`, \"gi\"))\r\n\r\n        return [matches, contractPrefix]\r\n\r\n    } else {\r\n        //Overwrite matches to simulate no match found in case of more than one match\r\n        return []\r\n    }    \r\n}\r\n\r\ntry {\r\n    //Assign function inputs to desriptive variables\r\n    const searchText = cc.sessionInformation.inputCleaner.outputText\r\n    const prefixes = cc.constants.contract.contractPrefixes\r\n\r\n    //Call the extractContractMatch function to test if there is a match\r\n    let contractMatch = extractContractMatch(searchText, prefixes)\r\n\r\n    //Check if match was found\r\n    if(contractMatch.length == 2) {\r\n        cc.sessionInformation.contract.validContract = true\r\n        cc.sessionInformation.contract.secondTryValid = true\r\n        cc.sessionInformation.contract.contractNumber = contractMatch[0][0].toUpperCase()\r\n        cc.sessionInformation.contract.contractPrefix = contractMatch[1][0].toUpperCase()\r\n    } else {\r\n        cc.sessionInformation.contract.secondTryValid = false\r\n    }\r\n\r\n\r\n\r\n} catch(error) {\r\n    api.log(\"error\", `[AUTH_01_1_Validate Contract; C: Search for contract number match] Error Message: ${error.toString()}`)\r\n\r\n}",
                "hasError": false,
                "transpiled": "function extractContractMatch(searchText, prefixes) {\n    const prefixPattern = prefixes.join(\"|\");\n    const contractRegex = new RegExp(`(${prefixPattern})\\\\d{4,9}`, \"gi\");\n    let matches = searchText.match(contractRegex) || [];\n    cc.mathces = matches;\n    if (matches.length == 1) {\n        const contractPrefix = matches[0].match(new RegExp(`(${prefixPattern})`, \"gi\"));\n        return [matches, contractPrefix];\n    }\n    else {\n        return [];\n    }\n}\ntry {\n    const searchText = cc.sessionInformation.inputCleaner.outputText;\n    const prefixes = cc.constants.contract.contractPrefixes;\n    let contractMatch = extractContractMatch(searchText, prefixes);\n    if (contractMatch.length == 2) {\n        cc.sessionInformation.contract.validContract = true;\n        cc.sessionInformation.contract.secondTryValid = true;\n        cc.sessionInformation.contract.contractNumber = contractMatch[0][0].toUpperCase();\n        cc.sessionInformation.contract.contractPrefix = contractMatch[1][0].toUpperCase();\n    }\n    else {\n        cc.sessionInformation.contract.secondTryValid = false;\n    }\n}\ncatch (error) {\n    api.log(\"error\", `[AUTH_01_1_Validate Contract; C: Search for contract number match] Error Message: ${error.toString()}`);\n}\n"
            },
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [
            "675d9e5dadc76627e3a2a3d7",
            "675d9e5dadc76612caa2a3e4"
        ],
        "_id": "675d9e5dadc7661365a2a3d0",
        "node": "675d9e5dadc7660328a2a3cd",
        "next": null,
        "_data": {
            "_id": "675d9e5dadc7660328a2a3cd",
            "referenceId": "f32ed2a4-a4c8-4e68-a8fa-aef5430a2470",
            "type": "if",
            "label": "User said contract number in response?",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "condition": {
                    "type": "condition",
                    "rule": {
                        "left": "1",
                        "operand": "eq",
                        "right": "1"
                    },
                    "condition": "{{cc.sessionInformation.contract.secondTryValid}}"
                }
            },
            "preview": {
                "type": "condition",
                "rule": {
                    "left": "1",
                    "operand": "eq",
                    "right": "1"
                },
                "condition": "{{cc.sessionInformation.contract.secondTryValid}}"
            },
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d9e5dadc7667382a2a3da",
        "node": "675d9e5dadc76627e3a2a3d7",
        "next": "675d9e88677ba79f6ddd9da1",
        "_data": {
            "_id": "675d9e5dadc76627e3a2a3d7",
            "referenceId": "461ed9e3-66cc-4210-b538-d8c858980478",
            "type": "then",
            "label": "Then",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d9e5dadc7662621a2a3e7",
        "node": "675d9e5dadc76612caa2a3e4",
        "next": null,
        "_data": {
            "_id": "675d9e5dadc76612caa2a3e4",
            "referenceId": "aa241191-e9f2-4bde-8d85-40ec07f56349",
            "type": "else",
            "label": "Else",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {},
            "preview": "",
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    },
    {
        "children": [],
        "_id": "675d9e88677ba74cd7dd9da4",
        "node": "675d9e88677ba79f6ddd9da1",
        "next": null,
        "_data": {
            "_id": "675d9e88677ba79f6ddd9da1",
            "referenceId": "7543f247-5ea4-499e-9215-32c29dd470b9",
            "type": "executeFlow",
            "label": "EX: AUTH_01_1_Validate Contract",
            "comment": "",
            "commentColor": "",
            "analyticsLabel": null,
            "isDisabled": false,
            "isEntryPoint": false,
            "extension": "@cognigy/basic-nodes",
            "config": {
                "flowNode": {
                    "flow": "b9897cad-bd59-4912-b63b-5519cebb0ed1",
                    "node": "5c4fe09e-cdbf-4662-8493-333bdc14aa65"
                },
                "parseIntents": true,
                "parseKeyphrases": true,
                "absorbContext": ""
            },
            "preview": {
                "flow": "b9897cad-bd59-4912-b63b-5519cebb0ed1",
                "node": "5c4fe09e-cdbf-4662-8493-333bdc14aa65"
            },
            "localeReference": "6759f148adc76698bc90c4c6"
        }
    }
]